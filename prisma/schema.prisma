// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// The Store model represents a store entity with related information and relations to other models.
model Store {
  id          String     @id @default(uuid()) // Primary key
  name        String
  description String     @default("")
  address     String     @default("")
  phone       String     @default("")
  twitter     String     @default("")
  facebook    String     @default("")
  instagram   String     @default("")
  logo        String     @default("")
  email       String     @default("")
  userId      String
  categories  Category[]
  products    Product[]
  orders      Order[]
  users       User[]
  tags        Tag[]
  options     Option[]

  createdAt DateTime @default(now()) // Auto-generated timestamp
  updatedAt DateTime @updatedAt // Auto-updated timestamp

  @@index([userId])
}

// The Category model represents a product category within a store.
model Category {
  id              String     @id @default(uuid())
  storeId         String // Foreign key to Store
  store           Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  imageURL        String?
  name            String
  description     String     @default("")
  products        Product[]
  parentId        String?
  parent          Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  childCategories Category[] @relation("CategoryToCategory") // One-to-many relation with Category

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

// The Product model represents a product entity with various attributes and relations.
model Product {
  id            String      @id @default(uuid())
  storeId       String // Foreign key to Store
  store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId    String // Foreign key to Category
  category      Category    @relation(fields: [categoryId], references: [id])
  name          String
  description   String
  slug          String
  price         Decimal
  salePrice     Decimal?
  shippingPrice Decimal?
  stock         Int
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  images        Image[] // One-to-many relation with Image
  orderItems    OrderItem[] // One-to-many relation with OrderItem
  variants      Variant[] // One-to-many relation with Variant
  tags          Tag[]
  seo           SEO?        @relation
  seoId         String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model SEO {
  id              String  @id @default(uuid())
  metaTitle       String  @default("")
  metaDescription String  @default("")
  metaKeywords    String  @default("")
  product         Product @relation(fields: [productId], references: [id])
  productId       String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The Variant model represents a product variant, such as different sizes or colors.
model Variant {
  id         String               @id @default(cuid())
  stock      Int
  productId  String
  product    Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  options    VariantOptionValue[] // Many-to-many relation with OptionValue
  orderItems OrderItem[] // One-to-many relation with OrderItem
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  @@index([productId])
}

// The Option model represents a set of values for a variant, such as color options.
model Option {
  id        String               @id @default(cuid())
  name      String
  storeId   String // Foreign key to Store
  store     Store                @relation(fields: [storeId], references: [id], onDelete: Cascade)
  values    OptionValue[] // One-to-many relation with OptionValue
  variants  VariantOptionValue[] // Many-to-many relation with Variant
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([storeId])
}

// The OptionValue model represents a specific value within an option, such as a specific color.
model OptionValue {
  id        String               @id @default(cuid())
  name      String
  optionId  String // Foreign key to Option
  option    Option               @relation(fields: [optionId], references: [id], onDelete: Cascade)
  variants  VariantOptionValue[] // Many-to-many relation with Variant
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([optionId])
}

// Junction table to represent the many-to-many relationship between Variant and OptionValue
model VariantOptionValue {
  variantId     String
  variant       Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValueId String
  optionValue   OptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
  optionId      String
  option        Option      @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@id([variantId, optionValueId])
  @@index([variantId])
  @@index([optionValueId])
}

// The Tag model represents tags that can be associated with products.
model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  storeId  String // Foreign key to Store
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The Order model represents a customer order with related information.
model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign key to Store
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] // One-to-many relation with OrderItem
  isPaid     Boolean     @default(false)
  totalPrice Decimal     @default(0)
  phone      String      @default("")
  address    String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

// The OrderItem model represents an item within an order.
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String // Foreign key to Order
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String // Foreign key to Product
  product   Product  @relation(fields: [productId], references: [id])
  variantId String?
  variant   Variant? @relation(fields: [variantId], references: [id])
  quantity  Int

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

// The Image model represents an image associated with a product.
model Image {
  id        String  @id @default(uuid())
  productId String // Foreign key to Product
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// The User model represents a user entity with authentication details.
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String // e.g., admin, manager, staff
  isActive  Boolean  @default(true)
  stores    Store[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
}
